@unpublished{ftmpst,
  author          = {K. Peters and U. Nestmann and C. Wagner},
  title           = {Fault-Tolerant Multiparty Session Types},
  year            = {2021},
  note            = {Provided by K. Peters.}
}
@book{dist_sys,
  author         = {George Coulouris and Jean Dollimore and Tim Kindberg},
  title          = {Distributed Systems: Concepts and Design (3rd Edition)},
  publisher      = {Addison-Wesley},
  year           = {2001},
  pages          = {452}
}
@article{mpstbd,
  author          = {A. Scalas and N. Yoshida},
  title           = {Multiparty session types, beyond duality},
  journal         = {Journal of Logical and Algebraic Methods in Programming},
  volume          = {97},
  number          = {},
  year            = {2018},
  pages           = {55-84}
}
@article{lamport2001paxos,
author = {Lamport, Leslie},
title = {Paxos Made Simple},
year = {2001},
month = {December},
abstract = {At the PODC 2001 conference, I got tired of everyone saying how difficult it was to understand the Paxos algorithm, published in [122]. Although people got so hung up in the pseudo-Greek names that they found the paper hard to understand, the algorithm itself is very simple. So, I cornered a couple of people at the conference and explained the algorithm to them orally, with no paper. When I got home, I wrote down the explanation as a short note, which I later revised based on comments from Fred Schneider and Butler Lampson. The current version is 13 pages long, and contains no formula more complicated than n1 &gt; n2.},
url = {https://www.microsoft.com/en-us/research/publication/paxos-made-simple/},
pages = {51-58},
journal = {ACM SIGACT News (Distributed Computing Column) 32, 4 (Whole Number 121, December 2001)},
edition = {ACM SIGACT News (Distributed Computing Column) 32, 4 (Whole Number 121, December 2001)},
}
@inproceedings{mp_async_st,
author = {Honda, Kohei and Yoshida, Nobuko and Carbone, Marco},
title = {Multiparty Asynchronous Session Types},
year = {2008},
isbn = {9781595936899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1328438.1328472},
doi = {10.1145/1328438.1328472},
abstract = {Communication is becoming one of the central elements in software development. As a potential typed foundation for structured communication-centred programming, session types have been studied over the last decade for a wide range of process calculi and programming languages, focussing on binary (two-party) sessions. This work extends the foregoing theories of binary session types to multiparty, asynchronous sessions, which often arise in practical communication-centred applications. Presented as a typed calculus for mobile processes, the theory introduces a new notion of types in which interactions involving multiple peers are directly abstracted as a global scenario. Global types retain a friendly type syntax of binary session types while capturing complex causal chains of multiparty asynchronous interactions. A global type plays the role of a shared agreement among communication peers, and is used as a basis of efficient type checking through its projection onto individual peers. The fundamental properties of the session type discipline such as communication safety, progress and session fidelity are established for generaln-party asynchronous interactions.},
booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {273–284},
numpages = {12},
keywords = {structured programming, causality, choreography, session types, mobile processes, multiparty, communications},
location = {San Francisco, California, USA},
series = {POPL '08}
}
@article{failure_detectors,
author = {Chandra, Tushar Deepak and Toueg, Sam},
title = {Unreliable Failure Detectors for Reliable Distributed Systems},
year = {1996},
issue_date = {March 1996},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {43},
number = {2},
issn = {0004-5411},
url = {https://doi.org/10.1145/226643.226647},
doi = {10.1145/226643.226647},
abstract = {We introduce the concept of unreliable failure detectors and study how they can be
used to solve Consensus in asynchronous systems with crash failures. We characterise
unreliable failure detectors in terms of two properties—completeness and accuracy.
We show that Consensus can be solved even with unreliable failure detectors that make
an infinite number of mistakes, and determine which ones can be used to solve Consensus
despite any  number of crashes, and which ones require a majority of correct processes.
We prove that Consensus and Atomic Broadcast are reducible to each other in asynchronous
systems with crash failures; thus, the above results also apply to Atomic Broadcast.
A companion paper shows that one of the failure detectors introduced here is the weakest
failure detector for solving Consensus [Chandra et al. 1992].},
journal = {J. ACM},
month = mar,
pages = {225–267},
numpages = {43},
keywords = {failure detection, asynchronous systems, fault-tolerance, atomic broadcast, message passing, commit problem, partial synchrony, consensus problem, processor failures, Byzantine Generals' problem, crash failures, agreement problem}
}
