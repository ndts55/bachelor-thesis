@unpublished{PetersEtal21,
  author          = {K. Peters and U. Nestmann and C. Wagner},
  title           = {Fault-Tolerant Multiparty Session Types},
  year            = {2021},
  note            = {Provided by K. Peters.}
}
@book{CoulourisEtal01,
  author         = {G. Coulouris and J. Dollimore and T. Kindberg},
  title          = {Distributed Systems: Concepts and Design (3rd Edition)},
  publisher      = {Addison-Wesley},
  year           = {2001},
  pages          = {452}
}
@article{ScalasEtal18,
  author          = {A. Scalas and N. Yoshida},
  title           = {Multiparty session types, beyond duality},
  journal         = {Journal of Logical and Algebraic Methods in Programming},
  volume          = {97},
  number          = {},
  year            = {2018},
  pages           = {55-84}
}
@article{Lamport01,
author = {Lamport, L.},
title = {Paxos Made Simple},
year = {2001},
month = {December},
abstract = {At the PODC 2001 conference, I got tired of everyone saying how difficult it was to understand the Paxos algorithm, published in [122]. Although people got so hung up in the pseudo-Greek names that they found the paper hard to understand, the algorithm itself is very simple. So, I cornered a couple of people at the conference and explained the algorithm to them orally, with no paper. When I got home, I wrote down the explanation as a short note, which I later revised based on comments from Fred Schneider and Butler Lampson. The current version is 13 pages long, and contains no formula more complicated than n1 &gt; n2.},
url = {https://www.microsoft.com/en-us/research/publication/paxos-made-simple/},
pages = {51-58},
journal = {ACM SIGACT News (Distributed Computing Column) 32, 4 (Whole Number 121, December 2001)},
edition = {ACM SIGACT News (Distributed Computing Column) 32, 4 (Whole Number 121, December 2001)},
}
@inproceedings{HondaYoshidaCarbone08,
author = {Honda, K. and Yoshida, N. and Carbone, M.},
title = {Multiparty Asynchronous Session Types},
year = {2008},
isbn = {9781595936899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1328438.1328472},
doi = {10.1145/1328438.1328472},
abstract = {Communication is becoming one of the central elements in software development. As a potential typed foundation for structured communication-centred programming, session types have been studied over the last decade for a wide range of process calculi and programming languages, focussing on binary (two-party) sessions. This work extends the foregoing theories of binary session types to multiparty, asynchronous sessions, which often arise in practical communication-centred applications. Presented as a typed calculus for mobile processes, the theory introduces a new notion of types in which interactions involving multiple peers are directly abstracted as a global scenario. Global types retain a friendly type syntax of binary session types while capturing complex causal chains of multiparty asynchronous interactions. A global type plays the role of a shared agreement among communication peers, and is used as a basis of efficient type checking through its projection onto individual peers. The fundamental properties of the session type discipline such as communication safety, progress and session fidelity are established for generaln-party asynchronous interactions.},
booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {273–284},
numpages = {12},
keywords = {structured programming, causality, choreography, session types, mobile processes, multiparty, communications},
location = {San Francisco, California, USA},
series = {POPL '08}
}
@article{hondaYoshidaCarbone16,
author = {Honda, K. and Yoshida, N. and Carbone, M.},
title = {Multiparty Asynchronous Session Types},
year = {2016},
issue_date = {March 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {63},
number = {1},
issn = {0004-5411},
url = {https://doi.org/10.1145/2827695},
doi = {10.1145/2827695},
abstract = {Communication is a central elements in software development. As a potential typed foundation for structured communication-centered programming, session types have been studied over the past decade for a wide range of process calculi and programming languages, focusing on binary (two-party) sessions. This work extends the foregoing theories of binary session types to multiparty, asynchronous sessions, which often arise in practical communication-centered applications. Presented as a typed calculus for mobile processes, the theory introduces a new notion of types in which interactions involving multiple peers are directly abstracted as a global scenario. Global types retain the friendly type syntax of binary session types while specifying dependencies and capturing complex causal chains of multiparty asynchronous interactions. A global type plays the role of a shared agreement among communication peers and is used as a basis of efficient type-checking through its projection onto individual peers. The fundamental properties of the session type discipline, such as communication safety, progress, and session fidelity, are established for general n-party asynchronous interactions.},
journal = {J. ACM},
month = {mar},
articleno = {9},
numpages = {67},
keywords = {progress, the pi-calculus, Session types, global protocols, projection, global types}
}
@article{ChandraToueg96,
author = {Chandra, T.D. and Toueg, S.},
title = {Unreliable Failure Detectors for Reliable Distributed Systems},
year = {1996},
issue_date = {March 1996},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {43},
number = {2},
issn = {0004-5411},
url = {https://doi.org/10.1145/226643.226647},
doi = {10.1145/226643.226647},
abstract = {We introduce the concept of unreliable failure detectors and study how they can be
used to solve Consensus in asynchronous systems with crash failures. We characterise
unreliable failure detectors in terms of two properties—completeness and accuracy.
We show that Consensus can be solved even with unreliable failure detectors that make
an infinite number of mistakes, and determine which ones can be used to solve Consensus
despite any  number of crashes, and which ones require a majority of correct processes.
We prove that Consensus and Atomic Broadcast are reducible to each other in asynchronous
systems with crash failures; thus, the above results also apply to Atomic Broadcast.
A companion paper shows that one of the failure detectors introduced here is the weakest
failure detector for solving Consensus [Chandra et al. 1992].},
journal = {J. ACM},
month = mar,
pages = {225–267},
numpages = {43},
keywords = {failure detection, asynchronous systems, fault-tolerance, atomic broadcast, message passing, commit problem, partial synchrony, consensus problem, processor failures, Byzantine Generals' problem, crash failures, agreement problem}
}
@article{Lamport06,
author = {Lamport, L.},
title = {Lower Bounds for Asynchronous Consensus},
year = {2006},
issue_date = {October   2006},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {19},
number = {2},
issn = {0178-2770},
url = {https://doi.org/10.1007/s00446-006-0155-x},
doi = {10.1007/s00446-006-0155-x},
abstract = {Impossibility results and best-case lower bounds are proved for the number of message
delays and the number of processes required to reach agreement in an asynchronous
consensus algorithm that tolerates non-Byzantine failures. General algorithms exist
that achieve these lower bounds in the normal case, when the response time of non-faulty
processes and the transmission delay of messages they send to one another are bounded.
Our theorems allow algorithms to do better in certain exceptional cases, and such
algorithms are presented. Two of these exceptional algorithms may be of practical
interest.},
journal = {Distrib. Comput.},
month = oct,
pages = {104–125},
numpages = {22},
keywords = {Paxos, Distributed algorithms, Fault tolerance, Consensus}
}
@Inbook{CoppoEtal15,
author="Coppo, M.
and Dezani-Ciancaglini, M.
and Padovani, L.
and Yoshida, N.",
editor="Bernardo, M.
and Johnsen, Einar B.",
title="A Gentle Introduction to Multiparty Asynchronous Session Types",
bookTitle="Formal Methods for Multicore Programming: 15th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2015, Bertinoro, Italy, June 15-19, 2015, Advanced Lectures",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="146--178",
abstract="This article provides a gentle introduction to multiparty session types, a class of behavioural types specifically targeted at describing protocols in distributed systems based on asynchronous communication. The type system ensures well-typed processes to enjoy non-trivial properties, including communication safety, protocol fidelity, as well as progress. The adoption of multiparty session types can positively affect the whole software lifecycle, from design to deployment, improving software reliability and reducing its development costs.",
isbn="978-3-319-18941-3",
doi="10.1007/978-3-319-18941-3_4",
url="https://doi.org/10.1007/978-3-319-18941-3_4"
}
@InProceedings{BettiniEtal08,
author="Bettini, L.
and Coppo, M.
and D'Antoni, L.
and De Luca, M.
and Dezani-Ciancaglini, M.
and Yoshida, N.",
editor="van Breugel, F.
and Chechik, M.",
title="Global Progress in Dynamically Interleaved Multiparty Sessions",
booktitle="CONCUR 2008 - Concurrency Theory",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="418--433",
abstract="A multiparty session forms a unit of structured interactions among many participants which follow a prescribed scenario specified as a global type signature. This paper develops, besides a more traditional communication type system, a novel static interaction type system for global progress in dynamically interleaved multiparty sessions.",
isbn="978-3-540-85361-9"
}
@InProceedings{BocciEtal10,
author="Bocchi, L.
and Honda, K.
and Tuosto, E.
and Yoshida, N.",
editor="Gastin, P.
and Laroussinie, F.",
title="A Theory of Design-by-Contract for Distributed Multiparty Interactions",
booktitle="CONCUR 2010 - Concurrency Theory",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="162--176",
abstract="Design by Contract (DbC) promotes reliable software development through elaboration of type signatures for sequential programs with logical predicates. This paper presents an assertion method, based on the $\pi$-calculus with full recursion, which generalises the notion of DbC to multiparty distributed interactions to enable effective specification and verification of distributed multiparty protocols. Centring on global assertions and their projections onto endpoint assertions, our method allows clear specifications for typed sessions, constraining the content of the exchanged messages, the choice of sub-conversations to follow, and invariants on recursions. The paper presents key theoretical foundations of this framework, including a sound and relatively complete compositional proof system for verifying processes against assertions.",
isbn="978-3-642-15375-4"
}
@article{MilnerParrowWalker92,
title = {A calculus of mobile processes, I},
journal = {Information and Computation},
volume = {100},
number = {1},
pages = {1-40},
year = {1992},
issn = {0890-5401},
doi = {https://doi.org/10.1016/0890-5401(92)90008-4},
url = {https://www.sciencedirect.com/science/article/pii/0890540192900084},
author = {R. Milner and J. Parrow and D. Walker},
abstract = {We present the π-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The π-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the π-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the π-calculus of higher-order functions (the λ-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions—i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed.}
}
@InProceedings{YoshidaDanielouBejleriHu10,
author="Yoshida, N.
and Deni{\'e}lou, P.M.
and Bejleri, A.
and Hu, R.",
editor="Ong, L.",
title="Parameterised Multiparty Session Types ",
booktitle="Foundations of Software Science and Computational Structures",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="128--145",
abstract="For many application-level distributed protocols and parallel algorithms, the set of participants, the number of messages or the interaction structure are only known at run-time. This paper proposes a dependent type theory for multiparty sessions which can statically guarantee type-safe, deadlock-free multiparty interactions among processes whose specifications are parameterised by indices. We use the primitive recursion operator from G{\"o}del's System {\$}{\backslash}mathcal T{\$}to express a wide range of communication patterns while keeping type checking decidable. We illustrate our type theory through non-trivial programming and verification examples taken from parallel algorithms and Web services usecases.",
isbn="978-3-642-12032-9"
}
@InProceedings{AguileraChenToueg97,
author="Aguilera, M.K.
and Chen, W.
and Toueg, S.",
editor="Mavronicolas, M.
and Tsigas, P.",
title="Heartbeat: A timeout-free failure detector for quiescent reliable communication",
booktitle="Distributed Algorithms",
year="1997",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="126--140",
abstract="We study the problem of achieving reliable communication with quiescent algorithms (i.e., algorithms that eventually stop sending messages) in asynchronous systems with process crashes and lossy links. We first show that it is impossible to solve this problem without failure detectors. We then show how to solve it using a new failure detector, called heartbeat. In contrast to previous failure detectors that have been used to circumvent impossibility results, the heartbeat failure detector is implementable, and its implementation does not use timeouts. These results have wide applicability: they can be used to transform many existing algorithms that tolerate only process crashes into quiescent algorithms that tolerate both process crashes and message losses. This can be applied to consensus, atomic broadcast, k-set agreement, atomic commitment, etc. The heartbeat failure detector is novel: besides being implementable without timeouts, it does not output lists of suspects as typical failure detectors do. If we restrict failure detectors to output only lists of suspects, quiescent reliable communication requires ◊P [2], which is not implementable. Combined with the results of this paper, this shows that traditional failure detectors that output only lists of suspects have fundamental limitations.",
isbn="978-3-540-69600-1"
}
@article{CairesVieira10,
title = {Conversation types},
journal = {Theoretical Computer Science},
volume = {411},
number = {51},
pages = {4399-4440},
year = {2010},
note = {European Symposium on Programming 2009},
issn = {0304-3975},
doi = {https://doi.org/10.1016/j.tcs.2010.09.010},
url = {https://www.sciencedirect.com/science/article/pii/S0304397510004895},
author = {L. Caires and H.T. Vieira},
keywords = {Behavioral types, Distributed systems, Program analysis, Service-based systems, Session types},
abstract = {We present a type theory for analyzing concurrent multiparty interactions as found in service-oriented computing. Our theory introduces a novel and flexible type structure, able to uniformly describe both the internal and the interface behavior of systems, referred respectively as choreographies and contracts in web-services terminology. The notion of conversation builds on the fundamental concept of session, but generalizes it along directions up to now unexplored; in particular, conversation types discipline interactions in conversations while accounting for dynamical join and leave of an unanticipated number of participants. We prove that well-typed systems never violate the prescribed conversation constraints. We also present techniques to ensure progress of systems involving several interleaved conversations, a previously open problem.}
}
@InProceedings{VieringEtal18,
author="Viering, M.
and Chen, T.
and Eugster, P.
and Hu, R.
and Ziarek, L.",
editor="Ahmed, A.",
title="A Typing Discipline for Statically Verified Crash Failure Handling in Distributed Systems",
booktitle="Programming Languages and Systems",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="799--826",
abstract="A key requirement for many distributed systems is to be resilient toward partial failures, allowing a system to progress despite the failure of some components. This makes programming of such systems daunting, particularly in regards to avoiding inconsistencies due to failures and asynchrony. This work introduces a formal model for crash failure handling in asynchronous distributed systems featuring a lightweight coordinator, modeled in the image of widely used systems such as ZooKeeper and Chubby. We develop a typing discipline based on multiparty session types for this model that supports the specification and static verification of multiparty protocols with explicit failure handling. We show that our type system ensures subject reduction and progress in the presence of failures. In other words, in a well-typed system even if some participants crash during execution, the system is guaranteed to progress in a consistent manner with the remaining participants.",
isbn="978-3-319-89884-1"
}
